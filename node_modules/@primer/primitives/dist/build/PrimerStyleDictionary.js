"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PrimerStyleDictionary = void 0;
const style_dictionary_1 = __importDefault(require("style-dictionary"));
const parsers_1 = require("./parsers");
const transformers_1 = require("./transformers");
const formats_1 = require("./formats");
/**
 * Parsers
 *
 */
style_dictionary_1.default.registerParser(parsers_1.w3cJsonParser);
/**
 * Formats
 *
 */
style_dictionary_1.default.registerFormat({
    name: 'css/advanced',
    formatter: formats_1.cssAdvanced,
});
style_dictionary_1.default.registerFormat({
    name: 'css/customMedia',
    formatter: formats_1.cssCustomMedia,
});
style_dictionary_1.default.registerFormat({
    name: 'javascript/esm',
    formatter: formats_1.javascriptEsm,
});
style_dictionary_1.default.registerFormat({
    name: 'javascript/commonJs',
    formatter: formats_1.javascriptCommonJs,
});
style_dictionary_1.default.registerFormat({
    name: 'typescript/export-definition',
    formatter: formats_1.typescriptExportDefinition,
});
style_dictionary_1.default.registerFormat({
    name: 'json/nested-prefixed',
    formatter: formats_1.jsonNestedPrefixed,
});
style_dictionary_1.default.registerFormat({
    name: 'json/one-dimensional',
    formatter: formats_1.jsonOneDimensional,
});
style_dictionary_1.default.registerFormat({
    name: 'json/postCss-fallback',
    formatter: formats_1.jsonPostCssFallback,
});
style_dictionary_1.default.registerFormat({
    name: 'json/figma',
    formatter: formats_1.jsonFigma,
});
/**
 * Transformers
 *
 */
style_dictionary_1.default.registerTransform(Object.assign({ name: 'color/rgbAlpha' }, transformers_1.colorToRgbAlpha));
style_dictionary_1.default.registerTransform(Object.assign({ name: 'color/rgbaFloat' }, transformers_1.colorToRgbaFloat));
style_dictionary_1.default.registerTransform(Object.assign({ name: 'color/hexMix' }, transformers_1.colorToHexMix));
style_dictionary_1.default.registerTransform(Object.assign({ name: 'color/hex' }, transformers_1.colorToHex));
style_dictionary_1.default.registerTransform(Object.assign({ name: 'float/pixel' }, transformers_1.floatToPixel));
style_dictionary_1.default.registerTransform(Object.assign({ name: 'float/pixelUnitless' }, transformers_1.floatToPixelUnitless));
style_dictionary_1.default.registerTransform(Object.assign({ name: 'dimension/rem' }, transformers_1.dimensionToRem));
style_dictionary_1.default.registerTransform(Object.assign({ name: 'dimension/remPxArray' }, transformers_1.dimensionToRemPxArray));
style_dictionary_1.default.registerTransform(Object.assign({ name: 'dimension/pixelUnitless' }, transformers_1.dimensionToPixelUnitless));
style_dictionary_1.default.registerTransform(Object.assign({ name: 'duration/css' }, transformers_1.durationToCss));
style_dictionary_1.default.registerTransform(Object.assign({ name: 'figma/attributes' }, transformers_1.figmaAttributes));
style_dictionary_1.default.registerTransform(Object.assign({ name: 'json/deprecated' }, transformers_1.jsonDeprecated));
style_dictionary_1.default.registerTransform(Object.assign({ name: 'name/pathToCamelCase' }, transformers_1.namePathToCamelCase));
style_dictionary_1.default.registerTransform(Object.assign({ name: 'name/pathToPascalCase' }, transformers_1.namePathToPascalCase));
style_dictionary_1.default.registerTransform(Object.assign({ name: 'name/pathToDotNotation' }, transformers_1.namePathToDotNotation));
style_dictionary_1.default.registerTransform(Object.assign({ name: 'name/pathToFigma' }, transformers_1.namePathToFigma));
style_dictionary_1.default.registerTransform(Object.assign({ name: 'name/pathToCamelCase' }, transformers_1.namePathToCamelCase));
style_dictionary_1.default.registerTransform(Object.assign({ name: 'name/pathToKebabCase' }, transformers_1.namePathToKebabCase));
style_dictionary_1.default.registerTransform(Object.assign({ name: 'name/pathToSlashNotation' }, transformers_1.namePathToSlashNotation));
style_dictionary_1.default.registerTransform(Object.assign({ name: 'shadow/css' }, transformers_1.shadowToCss));
style_dictionary_1.default.registerTransform(Object.assign({ name: 'border/css' }, transformers_1.borderToCss));
style_dictionary_1.default.registerTransform(Object.assign({ name: 'typography/css' }, transformers_1.typographyToCss));
style_dictionary_1.default.registerTransform(Object.assign({ name: 'fontWeight/number' }, transformers_1.fontWeightToNumber));
style_dictionary_1.default.registerTransform(Object.assign({ name: 'fontFamily/css' }, transformers_1.fontFamilyToCss));
style_dictionary_1.default.registerTransform(Object.assign({ name: 'fontFamily/figma' }, transformers_1.fontFamilyToFigma));
/**
 * @name {@link PrimerStyleDictionary}
 * @description Returns style dictionary object with primer preset that includes parsers, formats and transformers
 * @parsers [w3cJsonParser](https://github.com/primer/primitives/blob/main/config//parsers/w3c-json-parser.ts)
 * @formats [javascript/esm](https://github.com/primer/primitives/blob/main/config/formats/javascript-esm.ts), [javascript/commonJs](https://github.com/primer/primitives/blob/main/config/formats/javascript-commonJs.ts), [typescript/export-definition](https://github.com/primer/primitives/blob/main/config/formats/typescript-export-defition.ts)
 * @transformers [color/rgbAlpha](https://github.com/primer/primitives/blob/main/config/tranformers/color-to-rgb-alpha.ts), [color/hexAlpha](https://github.com/primer/primitives/blob/main/config/tranformers/color-to-hex-alpha.ts), [color/hex](https://github.com/primer/primitives/blob/main/config/tranformers/color-to-hex6.ts), [json/deprecated](https://github.com/primer/primitives/blob/main/config/tranformers/json-deprecated.ts), [name/pathToDotNotation](https://github.com/primer/primitives/blob/main/config/tranformers/name-path-to-dot-notation.ts)
 */
exports.PrimerStyleDictionary = style_dictionary_1.default;
