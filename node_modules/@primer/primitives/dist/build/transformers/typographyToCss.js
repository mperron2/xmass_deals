"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.typographyToCss = void 0;
const filters_1 = require("../filters");
const checkRequiredTokenProperties_1 = require("./utilities/checkRequiredTokenProperties");
const fontFamilyToCss_1 = require("./fontFamilyToCss");
const fontWeightToNumber_1 = require("./fontWeightToNumber");
const getTokenValue_1 = require("./utilities/getTokenValue");
/**
 * @description converts typograhy token value to css font shorthand
 * @type value transformer â€” [StyleDictionary.ValueTransform](https://github.com/amzn/style-dictionary/blob/main/types/Transform.d.ts)
 * @matcher matches all tokens of $type `typography`
 * @transformer returns a css font string
 */
exports.typographyToCss = {
    type: `value`,
    transitive: true,
    matcher: filters_1.isTypography,
    transformer: (token) => {
        // extract value
        const value = (0, getTokenValue_1.getTokenValue)(token);
        // validate token properties
        (0, checkRequiredTokenProperties_1.checkRequiredTokenProperties)(value, ['fontWeight', 'fontSize', 'fontFamily']);
        // format output
        return `${value.fontStyle || ''} ${(0, fontWeightToNumber_1.parseFontWeight)((0, getTokenValue_1.getTokenValue)(token, 'fontWeight'))} ${value.fontSize}${value.lineHeight ? `/${value.lineHeight}` : ''} ${(0, fontFamilyToCss_1.parseFontFamily)((0, getTokenValue_1.getTokenValue)(token, 'fontFamily'))}`
            .trim()
            .replace(/\s\s+/g, ' ');
    },
};
