"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.colorToRgbaFloat = void 0;
const color2k_1 = require("color2k");
const filters_1 = require("../filters");
const getTokenValue_1 = require("./utilities/getTokenValue");
const rgbaFloatToHex_1 = require("./utilities/rgbaFloatToHex");
const mix_1 = __importDefault(require("./utilities/mix"));
const hexToRgbaFloat_1 = require("./utilities/hexToRgbaFloat");
const isRgbaFloat_1 = require("./utilities/isRgbaFloat");
const toRgbaFloat = (token, alpha) => {
    var _a;
    let tokenValue = (0, getTokenValue_1.getTokenValue)(token);
    let tokenMixColor = (_a = token.mix) === null || _a === void 0 ? void 0 : _a.color;
    // get hex value from color string
    if ((0, isRgbaFloat_1.isRgbaFloat)(tokenValue)) {
        tokenValue = (0, rgbaFloatToHex_1.rgbaFloatToHex)(tokenValue, false);
    }
    if (tokenMixColor && (0, isRgbaFloat_1.isRgbaFloat)(tokenMixColor)) {
        tokenMixColor = (0, rgbaFloatToHex_1.rgbaFloatToHex)(tokenMixColor, false);
    }
    let hex = (0, color2k_1.toHex)(tokenValue);
    // mix color with mix color and weight
    if (token.mix && token.mix.color && token.mix.weight) {
        hex = (0, color2k_1.toHex)((0, mix_1.default)(tokenValue, tokenMixColor, token.mix.weight));
    }
    // return color as RgbaFloat
    return (0, hexToRgbaFloat_1.hexToRgbaFloat)(hex, alpha);
};
/**
 * @description converts color tokens rgba float with values from 0 - 1
 * @type value transformer â€” [StyleDictionary.ValueTransform](https://github.com/amzn/style-dictionary/blob/main/types/Transform.d.ts)
 * @matcher matches all tokens of $type `color`
 * @transformer returns a `rgb` float object
 */
exports.colorToRgbaFloat = {
    type: `value`,
    transitive: true,
    matcher: filters_1.isColor,
    transformer: (token) => {
        // skip if value is already rgb float
        if ((0, isRgbaFloat_1.isRgbaFloat)(token.value) && !('mix' in token) && !('alpha' in token))
            return token.value;
        // convert hex or rgb values to rgba float
        return toRgbaFloat(token, token.alpha);
    },
};
