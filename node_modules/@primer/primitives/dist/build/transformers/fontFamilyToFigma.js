"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fontFamilyToFigma = exports.parseFontFamily = void 0;
const filters_1 = require("../filters");
const hasSpaceInString_1 = require("./utilities/hasSpaceInString");
/**
 * takes a value and returns it if its a string or concats strings in an array quoting strings with spaces
 * @param value
 * @returns string
 */
const parseFontFamily = (token, fontFamilies = {}) => {
    // return value from fontFamilies
    if (token.name in fontFamilies) {
        return fontFamilies[token.name];
    }
    // return string
    if (typeof token.value === 'string') {
        return token.value;
    }
    // return stringified array
    if (Array.isArray(token.value)) {
        return token.value
            .map((string) => {
            if (typeof string !== 'string') {
                throw new Error(`Invalid value in array ${string}, must be a string`);
            }
            return (0, hasSpaceInString_1.hasSpaceInString)(string) ? `'${string}'` : string;
        })
            .join(', ');
    }
    // invalid value
    throw new Error(`Invalid value ${token.value}, should be a string or array of strings`);
};
exports.parseFontFamily = parseFontFamily;
/**
 * @description converts fontFamily tokens value to string
 * @type value transformer â€” [StyleDictionary.ValueTransform](https://github.com/amzn/style-dictionary/blob/main/types/Transform.d.ts)
 * @matcher matches all tokens of $type `fontFamily`
 * @transformer returns a string
 */
exports.fontFamilyToFigma = {
    type: `value`,
    transitive: true,
    matcher: filters_1.isFontFamily,
    transformer: (token, platform) => { var _a; return (0, exports.parseFontFamily)(token, (_a = platform.options) === null || _a === void 0 ? void 0 : _a.fontFamilies); },
};
