"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.jsonNestedPrefixed = void 0;
const sync_1 = __importDefault(require("@prettier/sync"));
const prefixTokens_1 = require("./utilities/prefixTokens");
const jsonToNestedValue_1 = require("./utilities/jsonToNestedValue");
/**
 * @description Takes a style dictionary token dictionary and converts it to a nested json string.
 * In contrast to the `json/nested` this formatter does add a prefix if provided
 * @param StyleDictionary.FormatterArguments
 * @returns formatted json `string`
 */
const jsonNestedPrefixed = ({ dictionary, file: _file, options, platform }) => {
    const { outputVerbose } = options;
    // add prefix if defined
    let tokens = (0, prefixTokens_1.prefixTokens)(dictionary.tokens, platform);
    if (!outputVerbose) {
        tokens = (0, jsonToNestedValue_1.jsonToNestedValue)(tokens);
    }
    // add file header and convert output
    const output = JSON.stringify(tokens, null, 2);
    // return prettified
    return sync_1.default.format(output, { parser: 'json', printWidth: 500 });
};
exports.jsonNestedPrefixed = jsonNestedPrefixed;
