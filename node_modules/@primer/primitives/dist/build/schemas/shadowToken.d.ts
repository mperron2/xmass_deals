import { z } from 'zod';
export declare const shadowValue: z.ZodObject<{
    color: z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodEffects<z.ZodString, string, string>]>;
    alpha: z.ZodUnion<[z.ZodEffects<z.ZodAny, any, any>, z.ZodEffects<z.ZodString, string, string>]>;
    offsetX: z.ZodUnion<[z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodLiteral<"0">, z.ZodLiteral<0>]>, z.ZodEffects<z.ZodString, string, string>]>;
    offsetY: z.ZodUnion<[z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodLiteral<"0">, z.ZodLiteral<0>]>, z.ZodEffects<z.ZodString, string, string>]>;
    blur: z.ZodUnion<[z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodLiteral<"0">, z.ZodLiteral<0>]>, z.ZodEffects<z.ZodString, string, string>]>;
    spread: z.ZodUnion<[z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodLiteral<"0">, z.ZodLiteral<0>]>, z.ZodEffects<z.ZodString, string, string>]>;
    inset: z.ZodOptional<z.ZodBoolean>;
}, "strict", z.ZodTypeAny, {
    color: string;
    blur: string | 0;
    offsetX: string | 0;
    offsetY: string | 0;
    spread: string | 0;
    alpha?: any;
    inset?: boolean | undefined;
}, {
    color: string;
    blur: string | 0;
    offsetX: string | 0;
    offsetY: string | 0;
    spread: string | 0;
    alpha?: any;
    inset?: boolean | undefined;
}>;
export declare const shadowToken: z.ZodObject<z.objectUtil.extendShape<{
    $description: z.ZodOptional<z.ZodString>;
    deprecated: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodBoolean]>>;
}, {
    $value: z.ZodUnion<[z.ZodObject<{
        color: z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodEffects<z.ZodString, string, string>]>;
        alpha: z.ZodUnion<[z.ZodEffects<z.ZodAny, any, any>, z.ZodEffects<z.ZodString, string, string>]>;
        offsetX: z.ZodUnion<[z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodLiteral<"0">, z.ZodLiteral<0>]>, z.ZodEffects<z.ZodString, string, string>]>;
        offsetY: z.ZodUnion<[z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodLiteral<"0">, z.ZodLiteral<0>]>, z.ZodEffects<z.ZodString, string, string>]>;
        blur: z.ZodUnion<[z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodLiteral<"0">, z.ZodLiteral<0>]>, z.ZodEffects<z.ZodString, string, string>]>;
        spread: z.ZodUnion<[z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodLiteral<"0">, z.ZodLiteral<0>]>, z.ZodEffects<z.ZodString, string, string>]>;
        inset: z.ZodOptional<z.ZodBoolean>;
    }, "strict", z.ZodTypeAny, {
        color: string;
        blur: string | 0;
        offsetX: string | 0;
        offsetY: string | 0;
        spread: string | 0;
        alpha?: any;
        inset?: boolean | undefined;
    }, {
        color: string;
        blur: string | 0;
        offsetX: string | 0;
        offsetY: string | 0;
        spread: string | 0;
        alpha?: any;
        inset?: boolean | undefined;
    }>, z.ZodArray<z.ZodObject<{
        color: z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodEffects<z.ZodString, string, string>]>;
        alpha: z.ZodUnion<[z.ZodEffects<z.ZodAny, any, any>, z.ZodEffects<z.ZodString, string, string>]>;
        offsetX: z.ZodUnion<[z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodLiteral<"0">, z.ZodLiteral<0>]>, z.ZodEffects<z.ZodString, string, string>]>;
        offsetY: z.ZodUnion<[z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodLiteral<"0">, z.ZodLiteral<0>]>, z.ZodEffects<z.ZodString, string, string>]>;
        blur: z.ZodUnion<[z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodLiteral<"0">, z.ZodLiteral<0>]>, z.ZodEffects<z.ZodString, string, string>]>;
        spread: z.ZodUnion<[z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodLiteral<"0">, z.ZodLiteral<0>]>, z.ZodEffects<z.ZodString, string, string>]>;
        inset: z.ZodOptional<z.ZodBoolean>;
    }, "strict", z.ZodTypeAny, {
        color: string;
        blur: string | 0;
        offsetX: string | 0;
        offsetY: string | 0;
        spread: string | 0;
        alpha?: any;
        inset?: boolean | undefined;
    }, {
        color: string;
        blur: string | 0;
        offsetX: string | 0;
        offsetY: string | 0;
        spread: string | 0;
        alpha?: any;
        inset?: boolean | undefined;
    }>, "many">, z.ZodEffects<z.ZodString, string, string>]>;
    $type: z.ZodLiteral<"string" | "number" | "border" | "color" | "fontFamily" | "fontWeight" | "dimension" | "shadow" | "typography" | "duration" | "custom-viewportRange">;
    $extensions: z.ZodOptional<z.ZodObject<{
        'org.primer.figma': z.ZodObject<{
            collection: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
            mode: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
        }, "strip", z.ZodTypeAny, {
            mode?: string | undefined;
            collection?: string | undefined;
        }, {
            mode?: string | undefined;
            collection?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        'org.primer.figma': {
            mode?: string | undefined;
            collection?: string | undefined;
        };
    }, {
        'org.primer.figma': {
            mode?: string | undefined;
            collection?: string | undefined;
        };
    }>>;
}>, "strict", z.ZodTypeAny, {
    $type: "string" | "number" | "border" | "color" | "fontFamily" | "fontWeight" | "dimension" | "shadow" | "typography" | "duration" | "custom-viewportRange";
    $value: string | {
        color: string;
        blur: string | 0;
        offsetX: string | 0;
        offsetY: string | 0;
        spread: string | 0;
        alpha?: any;
        inset?: boolean | undefined;
    } | {
        color: string;
        blur: string | 0;
        offsetX: string | 0;
        offsetY: string | 0;
        spread: string | 0;
        alpha?: any;
        inset?: boolean | undefined;
    }[];
    deprecated?: string | boolean | undefined;
    $extensions?: {
        'org.primer.figma': {
            mode?: string | undefined;
            collection?: string | undefined;
        };
    } | undefined;
    $description?: string | undefined;
}, {
    $type: "string" | "number" | "border" | "color" | "fontFamily" | "fontWeight" | "dimension" | "shadow" | "typography" | "duration" | "custom-viewportRange";
    $value: string | {
        color: string;
        blur: string | 0;
        offsetX: string | 0;
        offsetY: string | 0;
        spread: string | 0;
        alpha?: any;
        inset?: boolean | undefined;
    } | {
        color: string;
        blur: string | 0;
        offsetX: string | 0;
        offsetY: string | 0;
        spread: string | 0;
        alpha?: any;
        inset?: boolean | undefined;
    }[];
    deprecated?: string | boolean | undefined;
    $extensions?: {
        'org.primer.figma': {
            mode?: string | undefined;
            collection?: string | undefined;
        };
    } | undefined;
    $description?: string | undefined;
}>;
