"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.css = void 0;
const filters_1 = require("../filters");
const getCssSelectors = (outputFile) => {
    // check for dark in the beginning of the output filename
    const lastSlash = outputFile.lastIndexOf('/');
    const outputBasename = outputFile.substring(lastSlash + 1, outputFile.indexOf('.'));
    const themeName = outputBasename.replace(/-/g, '_');
    const mode = outputBasename.substring(0, 4) === 'dark' ? 'dark' : 'light';
    return [
        {
            selector: `[data-color-mode="${mode}"][data-${mode}-theme="${themeName}"], [data-color-mode="${mode}"][data-${mode}-theme="${themeName}"] ::backdrop, [data-color-mode="auto"][data-light-theme="${themeName}"], [data-color-mode="auto"][data-light-theme="${themeName}"] ::backdrop`,
        },
        {
            query: '@media (prefers-color-scheme: dark)',
            selector: `[data-color-mode="auto"][data-dark-theme="${themeName}"], [data-color-mode="auto"][data-dark-theme="${themeName}"] ::backdrop`,
        },
    ];
};
const css = (outputFile, prefix, buildPath, options) => {
    return {
        prefix,
        buildPath,
        transforms: [
            'name/pathToKebabCase',
            'color/hex',
            'color/hexMix',
            'dimension/rem',
            'duration/css',
            'shadow/css',
            'border/css',
            'typography/css',
            'fontFamily/css',
            'fontWeight/number',
        ],
        options: {
            basePxFontSize: 16,
        },
        files: [
            {
                destination: `${outputFile}`,
                format: `css/advanced`,
                filter: token => (0, filters_1.isSource)(token) && (options === null || options === void 0 ? void 0 : options.themed) === true,
                options: Object.assign({ showFileHeader: false, outputReferences: false, descriptions: false, queries: getCssSelectors(outputFile) }, options === null || options === void 0 ? void 0 : options.options),
            },
            {
                destination: `${outputFile}`,
                format: `css/advanced`,
                filter: token => (0, filters_1.isSource)(token) && (options === null || options === void 0 ? void 0 : options.themed) !== true,
                options: Object.assign({ showFileHeader: false, descriptions: false }, options === null || options === void 0 ? void 0 : options.options),
            },
            {
                destination: `${outputFile}`,
                format: `css/customMedia`,
                filter: token => (0, filters_1.isSource)(token) && (options === null || options === void 0 ? void 0 : options.themed) !== true && token.$type === 'custom-viewportRange',
                options: {
                    showFileHeader: false,
                },
            },
            {
                destination: `${outputFile}`,
                format: `css/advanced`,
                filter: token => (0, filters_1.isSource)(token) &&
                    (0, filters_1.isFromFile)(token, [
                        'src/tokens/functional/size/size-coarse.json',
                        'src/tokens/functional/size/size-fine.json',
                    ]),
                options: {
                    descriptions: false,
                    showFileHeader: false,
                    queries: [
                        {
                            query: '@media (pointer: fine)',
                            matcher: (token) => token.filePath.includes('size-fine'),
                        },
                        {
                            query: '@media (pointer: coarse)',
                            matcher: (token) => token.filePath.includes('size-coarse'),
                        },
                    ],
                },
            },
        ],
    };
};
exports.css = css;
